export const MAX_CHANNEL_COUNT: 32;
export const RENDER_QUANTUM_FRAMES: 128;
/**
 * A WASM HEAP wrapper for AudioBuffer class. This breaks down the AudioBuffer
 * into an Array of Float32Array for the convinient WASM opearion.
 *
 * @class
 * @dependency Module A WASM module generated by the emscripten glue code.
 */
export class FreeQueue {
    /**
     * @constructor
     * @param  {object} wasmModule WASM module generated by Emscripten.
     * @param  {number} length Buffer frame length.
     * @param  {number} channelCount Number of channels.
     * @param  {number} channelDataLength wasm channel data Buffer frame length.
     * @param  {number} channelDataCount wasm Number of channels.
     * @param  {number=} maxChannelCount Maximum number of channels.
     */
    constructor(wasmModule: object, length: number, channelCount: number, channelDataLength: number, channelDataCount: number, maxChannelCount?: number | undefined);
    _isInitialized: boolean;
    _module: object;
    _length: number;
    _channelDataLength: number;
    _channelDataCount: number;
    _maxChannelCount: number;
    _channelCount: number;
    _readIndex: number;
    _writeIndex: number;
    _framesAvailable: number;
    _channelDataLocal: Float32Array<ArrayBuffer>[];
    /**
     * Allocates memory in the WASM heap and set up Float32Array views for the
     * channel data.
     *
     * @private
     */
    private _allocateHeap;
    _dataPtr: any;
    _channelData: any[] | null | undefined;
    /**
     * Adapt the current channel count to the new input buffer.
     *
     * @param  {number} newChannelCount The new channel count.
     */
    adaptChannel(newChannelCount: number): void;
    /**
     * Getter for the buffer length in frames.
     *
     * @return {?number} Buffer length in frames.
     */
    get length(): number | null;
    /**
     * Getter for the number of channels.
     *
     * @return {?number} Buffer length in frames.
     */
    get numberOfChannels(): number | null;
    /**
     * Getter for the maxixmum number of channels allowed for the instance.
     *
     * @return {?number} Buffer length in frames.
     */
    get maxChannelCount(): number | null;
    /**
     * Returns a Float32Array object for a given channel index. If the channel
     * index is undefined, it returns the reference to the entire array of channel
     * data.
     *
     * @param  {number|undefined} channelIndex Channel index.
     * @return {?Array} a channel data array or an
     * array of channel data.
     */
    getChannelData(channelIndex: number | undefined): any[] | null;
    /**
     * Returns the base address of the allocated memory space in the WASM heap.
     *
     * @return {number} WASM Heap address.
     */
    getHeapAddress(): number;
    /**
     * Returns the base address of the allocated memory space in the WASM heap.
     *
     * @return {number} WASM Heap address.
     */
    getPointer(): number;
    /**
     * Frees the allocated memory space in the WASM heap.
     */
    free(): void;
    /**
     * Getter for Available frames in buffer.
     *
     * @return {number} Available frames in buffer.
     */
    get framesAvailable(): number;
    /**
     * Push a sequence of Float32Arrays to buffer.
     *
     * @param  {array} arraySequence A sequence of Float32Arrays.
     * @param  {number} factor A factor to multiply or divide each data point by.
     * @param  {boolean} isMonoChannel Whether the data is mono channel.
     * @param  {number} operation The operation to perform: OPERATION_MULTIPLY, OPERATION_DIVIDE, or OPERATION_NONE.
     */
    push(arraySequence: array, factor?: number, isMonoChannel?: boolean, operation?: number): void;
    /**
     * Pull data out of buffer and fill a given sequence of Float32Arrays.
     *
     * @param  {array} arraySequence An array of Float32Arrays.
     * @param  {number} factor A factor to multiply or divide each data point by.
     * @param  {boolean} isMonoChannel Whether the data is mono channel.
     * @param  {number} operation The operation to perform: OPERATION_MULTIPLY, OPERATION_DIVIDE, or OPERATION_NONE.
     */
    pull(arraySequence: array, factor?: number, isMonoChannel?: boolean, operation?: number): void;
    clear(): void;
}
export const OPERATION_NONE: 0;
export const OPERATION_MULTIPLY: 1;
export const OPERATION_DIVIDE: 2;
